from google import genai
from google.genai import types
import traceback

def get_stock_chatbot_response(user_message: str, user_context: dict = None) -> dict:
    """
    Get response from Gemini API for stock-related questions only.
    
    Args:
        user_message (str): The user's question
        user_context (dict): Optional context about user's portfolio, preferences, etc.
    
    Returns:
        dict: Response containing 'success', 'response', and optional 'error'
    """
    try:
        # Get API key and create client
        api_key = "AIzaSyALbt9ylByGrIC2Ju8i_hQq4_Mb5LLr7YQ"
        client = genai.Client(api_key=api_key)
        
        # Create a stock market focused system prompt in Vietnamese
        system_prompt = """
        B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n ƒë·∫ßu t∆∞ ch·ª©ng kho√°n Vi·ªát Nam th√¥ng minh v√† h·ªØu √≠ch. 
        
        QUAN TR·ªåNG: B·∫°n CH·ªà tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn:
        - Th·ªã tr∆∞·ªùng ch·ª©ng kho√°n
        - ƒê·∫ßu t∆∞ c·ªï phi·∫øu
        - Ph√¢n t√≠ch t√†i ch√≠nh
        - Kh√°i ni·ªám kinh t·∫ø
        - Chi·∫øn l∆∞·ª£c ƒë·∫ßu t∆∞
        - Qu·∫£n l√Ω r·ªßi ro
        - Tin t·ª©c t√†i ch√≠nh
        
        N·∫øu c√¢u h·ªèi KH√îNG li√™n quan ƒë·∫øn ch·ª©ng kho√°n/ƒë·∫ßu t∆∞, h√£y t·ª´ ch·ªëi l·ªãch s·ª± v√† h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng h·ªèi v·ªÅ ch·ªß ƒë·ªÅ ch·ª©ng kho√°n.
        
        Phong c√°ch tr·∫£ l·ªùi:
        - GI·ªÆ C√ÇU TR·∫¢ L·ªúI NG·∫ÆN G·ªåN (t·ªëi ƒëa 3-4 c√¢u)
        - ƒê∆∞a ra ƒë·ªãnh nghƒ©a ho·∫∑c gi·∫£i th√≠ch c∆° b·∫£n
        - Lu√¥n k·∫øt th√∫c b·∫±ng g·ª£i √Ω xem th√™m th√¥ng tin chi ti·∫øt
        - S·ª≠ d·ª•ng ti·∫øng Vi·ªát t·ª± nhi√™n v√† chuy√™n nghi·ªáp
        - S·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ t·∫°o s·ª± th√¢n thi·ªán
        - Nh·∫Øc nh·ªü v·ªÅ r·ªßi ro ƒë·∫ßu t∆∞ khi c·∫ßn thi·∫øt
        
        LU√îN K·∫æT TH√öC v·ªõi m·ªôt trong nh·ªØng g·ª£i √Ω sau:
        - "üìä Xem th√™m ph√¢n t√≠ch chi ti·∫øt t·∫°i trang Ticker ƒë·ªÉ hi·ªÉu r√µ h∆°n!"
        - "üìà Kh√°m ph√° d·ªØ li·ªáu c·ªï phi·∫øu th·ª±c t·∫ø t·∫°i trang All Stocks!"
        - "üéØ T√¨m hi·ªÉu th√™m v·ªÅ d·ª± ƒëo√°n gi√° t·∫°i trang Request Stocks!"
        - "üí° ƒê·ªçc th√™m h∆∞·ªõng d·∫´n ƒë·∫ßu t∆∞ t·∫°i trang About!"
        
        L∆∞u √Ω: ƒê√¢y l√† l·ªùi khuy√™n gi√°o d·ª•c, kh√¥ng ph·∫£i l·ªùi khuy√™n ƒë·∫ßu t∆∞ c·ª• th·ªÉ.
        """
        
        # Add user context if available
        context_info = ""
        if user_context:
            if user_context.get('preferred_stocks'):
                context_info += f"\nC√°c c·ªï phi·∫øu quan t√¢m: {', '.join(user_context['preferred_stocks'])}"
            if user_context.get('market_sentiment'):
                context_info += f"\nT√¨nh h√¨nh th·ªã tr∆∞·ªùng hi·ªán t·∫°i: {user_context['market_sentiment']}"
        
        # Combine system prompt with user message
        full_prompt = f"{system_prompt}\n\nTh√¥ng tin b·ªëi c·∫£nh:{context_info}\n\nC√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: {user_message}\n\nTr·∫£ l·ªùi:"
        
        # Generate response using the new client pattern
        response = client.models.generate_content(
            model="gemini-2.5-flash",
            contents=[{"role": "user", "parts": [{"text": full_prompt}]}],
            config=types.GenerateContentConfig(
                thinking_config=types.ThinkingConfig(thinking_budget=0)
            ),
        )
        
        if response and response.candidates and len(response.candidates) > 0:
            # Get the response text
            ai_response = response.candidates[0].content.parts[0].text.strip()
            
            # Check if the AI refused to answer (indicating non-stock question)
            refusal_keywords = [
                "kh√¥ng li√™n quan", "kh√¥ng ph·∫£i", "ch·ªâ tr·∫£ l·ªùi", 
                "kh√¥ng th·ªÉ tr·∫£ l·ªùi", "ngo√†i ch·ªß ƒë·ªÅ", "kh√¥ng thu·ªôc"
            ]
            
            is_refusal = any(keyword in ai_response.lower() for keyword in refusal_keywords)
            
            if is_refusal:
                return {
                    "success": True,
                    "response": "ü§î T√¥i ch·ªâ c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ c√°c v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn th·ªã tr∆∞·ªùng ch·ª©ng kho√°n v√† ƒë·∫ßu t∆∞. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ:\n\nüìà Ph√¢n t√≠ch c·ªï phi·∫øu\nüí∞ Chi·∫øn l∆∞·ª£c ƒë·∫ßu t∆∞\nüìä Kh√°i ni·ªám t√†i ch√≠nh\nüéØ Qu·∫£n l√Ω r·ªßi ro\nüì∞ Tin t·ª©c th·ªã tr∆∞·ªùng\n\nH√£y th·ª≠ h·ªèi m·ªôt c√¢u kh√°c v·ªÅ ch·ª©ng kho√°n nh√©!"
                }
            
            return {
                "success": True,
                "response": ai_response
            }
        else:
            return {
                "success": False,
                "error": "Empty response from Gemini",
                "response": "Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o ra c√¢u tr·∫£ l·ªùi l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i."
            }
            
    except Exception as e:
        print(f"Error in get_stock_chatbot_response: {e}")
        traceback.print_exc()
        return {
            "success": False,
            "error": str(e),
            "response": "Xin l·ªói, c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau."
        }

def is_stock_related_query(message: str) -> bool:
    """
    Check if a message is related to stocks/investment.
    This is a fallback check in case Gemini doesn't filter properly.
    """
    stock_keywords = [
        # Vietnamese stock terms
        'c·ªï phi·∫øu', 'ch·ª©ng kho√°n', 'ƒë·∫ßu t∆∞', 'th·ªã tr∆∞·ªùng', 'gi√°', 'mua', 'b√°n',
        'v·ªën h√≥a', 'p/e', 'eps', 'roe', 'roa', 'dividend', 'c·ªï t·ª©c',
        'vnindex', 'hsx', 'hnx', 'upcom', 'etf', 'fund', 'qu·ªπ',
        'ph√¢n t√≠ch', 'd·ª± ƒëo√°n', 'xu h∆∞·ªõng', 'tƒÉng', 'gi·∫£m', 'bi·∫øn ƒë·ªông',
        'r·ªßi ro', 'l·ª£i nhu·∫≠n', 'portfolio', 'danh m·ª•c', 'chi·∫øn l∆∞·ª£c',
        
        # English stock terms (in case users mix languages)
        'stock', 'share', 'invest', 'market', 'trading', 'broker',
        'bull', 'bear', 'volatility', 'return', 'yield', 'growth'
    ]
    
    message_lower = message.lower()
    return any(keyword in message_lower for keyword in stock_keywords)

# Test function
def test_chatbot():
    """Test function to verify the chatbot works"""
    test_questions = [
        "P/E ratio l√† g√¨?",
        "L√†m th·∫ø n√†o ƒë·ªÉ ph√¢n t√≠ch c·ªï phi·∫øu?",
        "Th·ªùi ti·∫øt h√¥m nay th·∫ø n√†o?",  # Should be rejected
        "Chi·∫øn l∆∞·ª£c ƒë·∫ßu t∆∞ d√†i h·∫°n nh∆∞ th·∫ø n√†o?"
    ]
    
    for question in test_questions:
        print(f"\nQuestion: {question}")
        result = get_stock_chatbot_response(question)
        print(f"Response: {result['response']}")
        print(f"Success: {result['success']}")
        if not result['success']:
            print(f"Error: {result.get('error', 'Unknown error')}")

