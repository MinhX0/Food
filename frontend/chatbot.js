// Create and initialize the chatbot UI
function createChatbotUI() {
    const chatbotHTML = `
        <div id="chatbot" class="fixed bottom-4 right-4 z-50">
            <div id="chat-window" class="hidden w-80 h-[450px] bg-green-500 rounded-lg shadow-xl overflow-hidden">
                <!-- Header -->
                <div class="flex justify-between items-center p-4 bg-green-500 text-white">
                    <h3 class="font-bold text-lg">ChatBot</h3>
                    <button id="close-chat" class="text-white hover:text-gray-200">
                        <span class="text-2xl">√ó</span>
                    </button>
                </div>
                
                <!-- Messages Container -->
                <div id="chat-messages" class="bg-white h-[340px] overflow-y-auto p-4">
                    <div class="chat-message bot-message mb-3">
                        <div class="bg-gray-100 text-gray-800 p-3 rounded-lg inline-block max-w-[85%] rounded-bl-sm">
                            Xin ch√†o! T√¥i l√† tr·ª£ l√Ω th·ªã tr∆∞·ªùng ch·ª©ng kho√°n c·ªßa b·∫°n. H√£y h·ªèi t√¥i v·ªÅ gi√° c·ªï phi·∫øu, xu h∆∞·ªõng th·ªã tr∆∞·ªùng ho·∫∑c b·∫•t k·ª≥ c√¢u h·ªèi ƒë·∫ßu t∆∞ n√†o! üìà
                        </div>
                    </div>
                    <div class="quick-actions flex flex-wrap gap-2 mb-3" id="quick-actions">
                        <button class="bg-green-100 text-green-700 px-3 py-1 rounded-full text-sm hover:bg-green-200 transition-colors" 
                                onclick="handleQuickAction('market-status')">üìä T√¨nh h√¨nh th·ªã tr∆∞·ªùng</button>
                        <button class="bg-blue-100 text-blue-700 px-3 py-1 rounded-full text-sm hover:bg-blue-200 transition-colors"
                                onclick="handleQuickAction('top-gainers')">üî• M√£ tƒÉng m·∫°nh</button>
                        <button class="bg-purple-100 text-purple-700 px-3 py-1 rounded-full text-sm hover:bg-purple-200 transition-colors"
                                onclick="handleQuickAction('help')">üí° H∆∞·ªõng d·∫´n</button>
                    </div>
                </div>
                
                <!-- Input Area -->
                <div class="bg-white p-4 border-t border-gray-200">
                    <div class="relative">
                        <input type="text" id="chat-input" 
                            class="w-full px-4 py-2 pr-12 border border-gray-300 rounded-lg focus:outline-none focus:border-green-500 focus:ring-1 focus:ring-green-500 text-gray-800 placeholder-gray-500"
                            placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n...">
                        <button id="send-message" 
                            class="absolute right-2 top-1/2 transform -translate-y-1/2 text-green-500 hover:text-green-600 p-1 rounded transition-colors">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Chat Toggle Button -->
            <button id="toggle-chat" class="bg-green-500 w-14 h-14 rounded-full shadow-lg flex items-center justify-center text-white hover:bg-green-600 transition-colors duration-200 ml-auto">
                <i class="fas fa-comments text-2xl"></i>
            </button>
        </div>
    `;

    // Add chatbot HTML to the page
    document.body.insertAdjacentHTML('beforeend', chatbotHTML);

    // Get DOM elements
    const chatWindow = document.getElementById('chat-window');
    const toggleChat = document.getElementById('toggle-chat');
    const closeChat = document.getElementById('close-chat');
    const chatInput = document.getElementById('chat-input');
    const sendMessage = document.getElementById('send-message');
    const chatMessages = document.getElementById('chat-messages');

    // Add message to chat
    function addMessage(message, isBot = false) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `chat-message ${isBot ? 'bot-message' : 'user-message'} mb-3`;
        
        const bubble = document.createElement('div');
        if (isBot) {
            bubble.className = 'bg-gray-100 text-gray-800 p-3 rounded-lg inline-block max-w-[85%] rounded-bl-sm';
        } else {
            bubble.className = 'bg-blue-500 text-white p-3 rounded-lg inline-block max-w-[85%] ml-auto rounded-br-sm';
        }
        bubble.innerHTML = message; // Changed to innerHTML to support rich content
        
        messageDiv.appendChild(bubble);
        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // Add rich message with HTML content
    function addRichMessage(content) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'chat-message bot-message mb-3';
        messageDiv.innerHTML = `
            <div class="bg-gray-100 text-gray-800 p-3 rounded-lg inline-block max-w-[95%] rounded-bl-sm">
                ${content}
            </div>
        `;
        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // Stock market query classification
    function classifyStockQuery(message) {
        const msg = message.toLowerCase();
        
        // Stock price patterns (Vietnamese)
        if (msg.includes('gi√°') || msg.includes('bao nhi√™u') || msg.includes('hi·ªán t·∫°i') || msg.includes('ƒëang') || msg.includes('quote')) {
            const symbolMatch = msg.match(/\b([a-z]{2,5})\b/i);
            return { type: 'STOCK_PRICE', symbol: symbolMatch?.[1] };
        }
        
        // Market analysis patterns (Vietnamese)
        if (msg.includes('th·ªã tr∆∞·ªùng') || msg.includes('xu h∆∞·ªõng') || msg.includes('ph√¢n t√≠ch') || msg.includes('t·ªïng quan') || msg.includes('t√¨nh h√¨nh')) {
            return { type: 'MARKET_ANALYSIS' };
        }
        
        // Educational patterns (Vietnamese)
        if (msg.includes('l√† g√¨') || msg.includes('gi·∫£i th√≠ch') || msg.includes('h·ªçc') || msg.includes('t√¨m hi·ªÉu') || msg.includes('nghƒ©a')) {
            return { type: 'EDUCATION' };
        }
        
        // Prediction patterns (Vietnamese)
        if (msg.includes('d·ª± ƒëo√°n') || msg.includes('d·ª± b√°o') || msg.includes('t∆∞∆°ng lai') || msg.includes('s·∫Ω') || msg.includes('predict')) {
            const symbolMatch = msg.match(/\b([a-z]{2,5})\b/i);
            return { type: 'PREDICTION', symbol: symbolMatch?.[1] };
        }
        
        // Help patterns (Vietnamese)
        if (msg.includes('gi√∫p') || msg.includes('h∆∞·ªõng d·∫´n') || msg.includes('l√†m g√¨') || msg.includes('commands')) {
            return { type: 'HELP' };
        }
        
        return { type: 'GENERAL', message: msg };
    }

    // Handle stock price queries
    async function handleStockPriceQuery(symbol) {
        if (!symbol) {
            addMessage("Vui l√≤ng ch·ªâ ƒë·ªãnh m√£ c·ªï phi·∫øu. V√≠ d·ª•: 'Gi√° VIC bao nhi√™u?'", true);
            return;
        }
        
        addMessage("üîç ƒêang tra c·ª©u gi√° hi·ªán t·∫°i...", true);
        
        try {
            const response = await fetch(`/ticker_data?symbol=${symbol.toUpperCase()}&days=0`);
            const data = await response.json();
            
            if (data && data.symbol) {
                const changeIcon = data.change_percent >= 0 ? "üìà" : "üìâ";
                const changeColor = data.change_percent >= 0 ? "text-green-600" : "text-red-600";
                
                const priceInfo = `
                    <div class="font-semibold text-lg mb-2">${data.symbol} - ${data.company_name || 'Th√¥ng tin c·ªï phi·∫øu'}</div>
                    <div class="space-y-1">
                        <div>üí∞ <strong>Gi√°:</strong> ${data.price ? data.price.toLocaleString() + ' VND' : 'Kh√¥ng c√≥'}</div>
                        <div class="${changeColor}">
                            ${changeIcon} <strong>Thay ƒë·ªïi:</strong> ${data.change_percent ? data.change_percent.toFixed(2) + '%' : 'Kh√¥ng c√≥'}
                        </div>
                        <div>üìä <strong>Kh·ªëi l∆∞·ª£ng:</strong> ${data.volume ? data.volume.toLocaleString() : 'Kh√¥ng c√≥'}</div>
                    </div>
                `;
                
                addRichMessage(priceInfo);
            } else {
                addMessage(`Xin l·ªói, t√¥i kh√¥ng th·ªÉ t√¨m th·∫•y d·ªØ li·ªáu hi·ªán t·∫°i cho ${symbol.toUpperCase()}. Vui l√≤ng ki·ªÉm tra m√£ c·ªï phi·∫øu v√† th·ª≠ l·∫°i.`, true);
            }
        } catch (error) {
            addMessage(`Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu cho ${symbol.toUpperCase()}. Vui l√≤ng th·ª≠ l·∫°i sau.`, true);
        }
    }

    // Handle market analysis
    async function handleMarketAnalysis() {
        addMessage("üìä ƒêang ph√¢n t√≠ch xu h∆∞·ªõng th·ªã tr∆∞·ªùng hi·ªán t·∫°i...", true);
        
        try {
            const response = await fetch('/ticker_status');
            const data = await response.json();
            
            if (data && data.length > 0) {
                const gainers = data.filter(stock => stock.change_percent > 0).length;
                const losers = data.filter(stock => stock.change_percent < 0).length;
                const unchanged = data.filter(stock => stock.change_percent === 0).length;
                
                const marketSummary = `
                    <div class="font-semibold text-lg mb-2">üìà T·ªïng quan th·ªã tr∆∞·ªùng</div>
                    <div class="space-y-1">
                        <div class="text-green-600">‚ñ≤ M√£ tƒÉng: ${gainers} c·ªï phi·∫øu</div>
                        <div class="text-red-600">‚ñº M√£ gi·∫£m: ${losers} c·ªï phi·∫øu</div>
                        <div class="text-gray-600">‚îÅ Kh√¥ng ƒë·ªïi: ${unchanged} c·ªï phi·∫øu</div>
                    </div>
                    <div class="mt-2 text-sm text-gray-600">
                        T√¢m l√Ω th·ªã tr∆∞·ªùng: ${gainers > losers ? 'T√≠ch c·ª±c üêÇ' : gainers < losers ? 'Ti√™u c·ª±c üêª' : 'Trung t√≠nh ‚öñÔ∏è'}
                    </div>
                `;
                
                addRichMessage(marketSummary);
            } else {
                addMessage("D·ªØ li·ªáu th·ªã tr∆∞·ªùng hi·ªán t·∫°i kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau.", true);
            }
        } catch (error) {
            addMessage("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu th·ªã tr∆∞·ªùng v√†o l√∫c n√†y.", true);
        }
    }

    // Handle prediction queries
    async function handlePredictionQuery(symbol) {
        if (!symbol) {
            addMessage("Vui l√≤ng ch·ªâ ƒë·ªãnh m√£ c·ªï phi·∫øu ƒë·ªÉ d·ª± ƒëo√°n. V√≠ d·ª•: 'D·ª± ƒëo√°n VIC'", true);
            return;
        }
        
        addMessage("üîÆ ƒêang ph√¢n t√≠ch d·ªØ li·ªáu d·ª± ƒëo√°n...", true);
        
        try {
            const response = await fetch(`/prediction_data?symbol=${symbol.toUpperCase()}`);
            const data = await response.json();
            
            if (data && data.predicted_price) {
                const prediction = `
                    <div class="font-semibold text-lg mb-2">üîÆ D·ª± ƒëo√°n AI cho ${symbol.toUpperCase()}</div>
                    <div class="space-y-1">
                        <div>üí∞ <strong>Gi√° d·ª± ƒëo√°n:</strong> ${data.predicted_price.toLocaleString()} VND</div>
                        <div>üìà <strong>Xu h∆∞·ªõng:</strong> ${data.direction}</div>
                        <div>üìä <strong>ƒê·ªô tin c·∫≠y:</strong> ${(data.probabilities[2] * 100).toFixed(1)}% (TƒÉng gi√°)</div>
                    </div>
                    <div class="mt-2 p-2 bg-yellow-50 rounded text-sm">
                        üí° <strong>Khuy·∫øn ngh·ªã:</strong> ${data.advice}
                    </div>
                `;
                
                addRichMessage(prediction);
            } else {
                addMessage(`Xin l·ªói, d·ªØ li·ªáu d·ª± ƒëo√°n cho ${symbol.toUpperCase()} kh√¥ng kh·∫£ d·ª•ng.`, true);
            }
        } catch (error) {
            addMessage("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu d·ª± ƒëo√°n v√†o l√∫c n√†y.", true);
        }
    }

    // Handle educational queries
    function handleEducationalQuery(message) {
        const educationalResponses = {
            'p/e': 'Ch·ªâ s·ªë P/E (Price-to-Earnings) ƒëo l∆∞·ªùng gi√° c·ªï phi·∫øu hi·ªán t·∫°i so v·ªõi thu nh·∫≠p tr√™n m·ªói c·ªï phi·∫øu. P/E cao cho th·∫•y nh√† ƒë·∫ßu t∆∞ k·ª≥ v·ªçng tƒÉng tr∆∞·ªüng cao, P/E th·∫•p c√≥ th·ªÉ b√°o hi·ªáu ƒë·ªãnh gi√° th·∫•p.',
            'pe': 'Ch·ªâ s·ªë P/E (Price-to-Earnings) ƒëo l∆∞·ªùng gi√° c·ªï phi·∫øu hi·ªán t·∫°i so v·ªõi thu nh·∫≠p tr√™n m·ªói c·ªï phi·∫øu. P/E cao cho th·∫•y nh√† ƒë·∫ßu t∆∞ k·ª≥ v·ªçng tƒÉng tr∆∞·ªüng cao, P/E th·∫•p c√≥ th·ªÉ b√°o hi·ªáu ƒë·ªãnh gi√° th·∫•p.',
            'v·ªën h√≥a': 'V·ªën h√≥a th·ªã tr∆∞·ªùng l√† t·ªïng gi√° tr·ªã c·ªßa t·∫•t c·∫£ c·ªï phi·∫øu c·ªßa c√¥ng ty. ƒê∆∞·ª£c t√≠nh b·∫±ng gi√° c·ªï phi·∫øu nh√¢n v·ªõi t·ªïng s·ªë c·ªï phi·∫øu ƒëang l∆∞u h√†nh.',
            'market cap': 'V·ªën h√≥a th·ªã tr∆∞·ªùng l√† t·ªïng gi√° tr·ªã c·ªßa t·∫•t c·∫£ c·ªï phi·∫øu c·ªßa c√¥ng ty. ƒê∆∞·ª£c t√≠nh b·∫±ng gi√° c·ªï phi·∫øu nh√¢n v·ªõi t·ªïng s·ªë c·ªï phi·∫øu ƒëang l∆∞u h√†nh.',
            'kh·ªëi l∆∞·ª£ng': 'Kh·ªëi l∆∞·ª£ng giao d·ªãch l√† s·ªë c·ªï phi·∫øu ƒë∆∞·ª£c giao d·ªãch trong m·ªôt kho·∫£ng th·ªùi gian nh·∫•t ƒë·ªãnh. Kh·ªëi l∆∞·ª£ng cao th∆∞·ªùng cho th·∫•y s·ª± quan t√¢m m·∫°nh m·∫Ω v√† c√≥ th·ªÉ x√°c nh·∫≠n xu h∆∞·ªõng gi√°.',
            'volume': 'Kh·ªëi l∆∞·ª£ng giao d·ªãch l√† s·ªë c·ªï phi·∫øu ƒë∆∞·ª£c giao d·ªãch trong m·ªôt kho·∫£ng th·ªùi gian nh·∫•t ƒë·ªãnh. Kh·ªëi l∆∞·ª£ng cao th∆∞·ªùng cho th·∫•y s·ª± quan t√¢m m·∫°nh m·∫Ω v√† c√≥ th·ªÉ x√°c nh·∫≠n xu h∆∞·ªõng gi√°.',
            'c·ªï t·ª©c': 'C·ªï t·ª©c l√† kho·∫£n thanh to√°n m√† c√¥ng ty tr·∫£ cho c√°c c·ªï ƒë√¥ng, th∆∞·ªùng t·ª´ l·ª£i nhu·∫≠n. C·ªï t·ª©c cung c·∫•p thu nh·∫≠p th∆∞·ªùng xuy√™n cho nh√† ƒë·∫ßu t∆∞.',
            'dividend': 'C·ªï t·ª©c l√† kho·∫£n thanh to√°n m√† c√¥ng ty tr·∫£ cho c√°c c·ªï ƒë√¥ng, th∆∞·ªùng t·ª´ l·ª£i nhu·∫≠n. C·ªï t·ª©c cung c·∫•p thu nh·∫≠p th∆∞·ªùng xuy√™n cho nh√† ƒë·∫ßu t∆∞.',
            'h·ªó tr·ª£ kh√°ng c·ª±': 'H·ªó tr·ª£ l√† m·ª©c gi√° m√† c·ªï phi·∫øu th∆∞·ªùng ng·ª´ng gi·∫£m. Kh√°ng c·ª± l√† m·ª©c gi√° m√† c·ªï phi·∫øu th∆∞·ªùng ng·ª´ng tƒÉng. Nh·ªØng m·ª©c n√†y gi√∫p d·ª± ƒëo√°n chuy·ªÉn ƒë·ªông gi√° trong t∆∞∆°ng lai.'
        };
        
        const query = message.toLowerCase();
        let response = null;
        
        for (const [key, value] of Object.entries(educationalResponses)) {
            if (query.includes(key)) {
                response = value;
                break;
            }
        }
        
        if (response) {
            addMessage(`üìö ${response}`, true);
        } else {
            addMessage("T√¥i s·∫µn s√†ng gi·∫£i th√≠ch c√°c kh√°i ni·ªám th·ªã tr∆∞·ªùng ch·ª©ng kho√°n! H√£y h·ªèi v·ªÅ: P/E, v·ªën h√≥a th·ªã tr∆∞·ªùng, kh·ªëi l∆∞·ª£ng, c·ªï t·ª©c, ho·∫∑c h·ªó tr·ª£/kh√°ng c·ª±.", true);
        }
    }

    // Handle help queries
    function handleHelpQuery() {
        const helpMessage = `
            <div class="font-semibold text-lg mb-2">üí° T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:</div>
            <div class="space-y-2 text-sm">
                <div><strong>üìà Gi√° c·ªï phi·∫øu:</strong> "Gi√° VIC bao nhi√™u?"</div>
                <div><strong>üîÆ D·ª± ƒëo√°n:</strong> "D·ª± ƒëo√°n VHM"</div>
                <div><strong>üìä Ph√¢n t√≠ch th·ªã tr∆∞·ªùng:</strong> "T√¨nh h√¨nh th·ªã tr∆∞·ªùng"</div>
                <div><strong>üìö Gi√°o d·ª•c:</strong> "P/E l√† g√¨?"</div>
                <div><strong>üí∞ V√≠ d·ª•:</strong> Th·ª≠ VIC, VHM, MSN, FPT, v.v.</div>
            </div>
        `;
        addRichMessage(helpMessage);
    }

    // Handle general queries with Gemini AI backend
    async function handleGeneralQuery(message) {
        // Show typing indicator
        const typingDiv = document.createElement('div');
        typingDiv.className = 'chat-message bot-message mb-3';
        typingDiv.id = 'typing-indicator';
        typingDiv.innerHTML = `
            <div class="bg-gray-100 text-gray-600 p-3 rounded-lg inline-block max-w-[85%] rounded-bl-sm">
                <i class="fas fa-circle-notch fa-spin mr-2"></i>ƒêang suy nghƒ©...
            </div>
        `;
        chatMessages.appendChild(typingDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;

        try {
            const response = await fetch('http://localhost:8000/api/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    message: message,
                    user_context: {
                        preferred_stocks: [], // Could be populated from user preferences
                        market_sentiment: "neutral"
                    }
                })
            });

            // Remove typing indicator
            const typingIndicator = document.getElementById('typing-indicator');
            if (typingIndicator) {
                typingIndicator.remove();
            }

            if (response.ok) {
                const data = await response.json();
                if (data.success) {
                    addMessage(data.response, true);
                } else {
                    addMessage(data.response || "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y.", true);
                }
            } else {
                throw new Error('Network response was not ok');
            }
        } catch (error) {
            // Remove typing indicator if still present
            const typingIndicator = document.getElementById('typing-indicator');
            if (typingIndicator) {
                typingIndicator.remove();
            }
            
            console.error('Error calling chat API:', error);
            
            // Fallback to local responses
            const fallbackResponses = [
                "T√¥i ·ªü ƒë√¢y ƒë·ªÉ gi√∫p b·∫°n v·ªÅ th·ªã tr∆∞·ªùng ch·ª©ng kho√°n! H√£y h·ªèi v·ªÅ c·ªï phi·∫øu c·ª• th·ªÉ ho·∫∑c c√°c kh√°i ni·ªám th·ªã tr∆∞·ªùng.",
                "T√¥i c√≥ th·ªÉ cung c·∫•p gi√° c·ªï phi·∫øu, d·ª± ƒëo√°n v√† ph√¢n t√≠ch th·ªã tr∆∞·ªùng. B·∫°n mu·ªën bi·∫øt g√¨?",
                "C·ª© t·ª± nhi√™n h·ªèi t√¥i v·ªÅ b·∫•t k·ª≥ c·ªï phi·∫øu Vi·ªát Nam n√†o ho·∫∑c th√¥ng tin th·ªã tr∆∞·ªùng chung!",
                "T√¥i l√† tr·ª£ l√Ω th·ªã tr∆∞·ªùng ch·ª©ng kho√°n c·ªßa b·∫°n. H√£y h·ªèi t√¥i v·ªÅ gi√° c·∫£, xu h∆∞·ªõng ho·∫∑c kh√°i ni·ªám ƒë·∫ßu t∆∞!"
            ];
            
            const randomResponse = fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)];
            addMessage(randomResponse + " (T√¥i ƒëang g·∫∑p s·ª± c·ªë k·∫øt n·ªëi ƒë·∫øn AI, h√£y th·ª≠ l·∫°i sau!)", true);
        }
    }

    // Show error message
    function showError() {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'chat-message bot-message mb-3';
        errorDiv.innerHTML = `
            <div class="bg-red-100 text-red-600 p-3 rounded-lg inline-block max-w-[85%] border border-red-200 rounded-bl-sm">
                Oops! C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i
            </div>
        `;
        chatMessages.appendChild(errorDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // Handle sending message with stock market intelligence
    async function handleSendMessage() {
        const message = chatInput.value.trim();
        if (!message) return;

        // Add user message
        addMessage(message, false);
        chatInput.value = '';

        try {
            // Classify the user's intent
            const intent = classifyStockQuery(message);
            
            switch(intent.type) {
                case 'STOCK_PRICE':
                    await handleStockPriceQuery(intent.symbol);
                    break;
                case 'MARKET_ANALYSIS':
                    await handleMarketAnalysis();
                    break;
                case 'PREDICTION':
                    await handlePredictionQuery(intent.symbol);
                    break;
                case 'EDUCATION':
                    handleEducationalQuery(message);
                    break;
                case 'HELP':
                    handleHelpQuery();
                    break;
                default:
                    handleGeneralQuery(message);
            }
        } catch (error) {
            console.error('Chat error:', error);
            showError();
        }
    }

    // Global function for quick actions
    window.handleQuickAction = function(action) {
        switch(action) {
            case 'market-status':
                addMessage('Cho t√¥i xem t√¨nh h√¨nh th·ªã tr∆∞·ªùng', false);
                handleMarketAnalysis();
                break;
            case 'top-gainers':
                addMessage('Nh·ªØng m√£ n√†o tƒÉng m·∫°nh nh·∫•t?', false);
                // You can implement this separately or as part of market analysis
                addMessage('üìà T√≠nh nƒÉng top m√£ tƒÉng m·∫°nh s·∫Ω c√≥ s·ªõm! Hi·ªán t·∫°i, h√£y th·ª≠ h·ªèi v·ªÅ c√°c c·ªï phi·∫øu c·ª• th·ªÉ nh∆∞ VIC, VHM, ho·∫∑c MSN.', true);
                break;
            case 'help':
                addMessage('H∆∞·ªõng d·∫´n t√¥i c√°ch s·ª≠ d·ª•ng', false);
                handleHelpQuery();
                break;
        }
    };

    // Event Listeners
    toggleChat.addEventListener('click', () => {
        chatWindow.classList.toggle('hidden');
        if (!chatWindow.classList.contains('hidden')) {
            chatInput.focus();
        }
    });

    closeChat.addEventListener('click', () => {
        chatWindow.classList.add('hidden');
    });

    sendMessage.addEventListener('click', handleSendMessage);

    chatInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            handleSendMessage();
        }
    });
}

// Add styles
function addChatbotStyles() {
    const styles = document.createElement('style');
    styles.textContent = `
        .chat-message {
            animation: slideIn 0.3s ease-out;
        }

        .bot-message {
            display: flex;
            justify-content: flex-start;
        }

        .user-message {
            display: flex;
            justify-content: flex-end;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        #chat-messages::-webkit-scrollbar {
            width: 6px;
        }

        #chat-messages::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        #chat-messages::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 3px;
        }

        #chat-messages::-webkit-scrollbar-thumb:hover {
            background: #555;
        }

        #chat-window {
            transition: all 0.3s ease-in-out;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        }

        #toggle-chat {
            transition: all 0.3s ease-in-out;
        }

        #toggle-chat:hover {
            transform: scale(1.05);
        }
    `;
    document.head.appendChild(styles);
}

// Export initialization function
window.initializeChatbot = function() {
    addChatbotStyles();
    createChatbotUI();
};
